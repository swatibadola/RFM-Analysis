# -*- coding: utf-8 -*-
"""RFM Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_EgmT7I6kuxvhpYpmpeYGqndy4QJ2r91

## RFM Analysis to get the information of customer engagement, loyal customers, and value to customers & proceed with the marketing strategies accordingly. This will give us an imp insight about our most loyal customers, which will help us increase the revenue of the business.
"""

import pandas as pd
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
pio.templates.default = "plotly_white"

data = pd.read_csv('rfm_data.csv')
data.head()

"""## Calculating RFM values"""

from datetime import datetime
# import pandas as pd

# Convert 'PurchaseDate' to datetime
data['PurchaseDate'] = pd.to_datetime(data['PurchaseDate'], errors='coerce')

# Calc Recency
data['Recency'] = (datetime.now() - data['PurchaseDate']).dt.days

# Calc Frequency
frequency_data = data.groupby('CustomerID')['OrderID'].count().reset_index()
frequency_data.rename(columns = {'OrderID' : 'Frequency'}, inplace=True)
data = data.merge(frequency_data, on='CustomerID', how='left', suffixes=('', '_freq'))

#  Monetary value
monetary_data = data.groupby('CustomerID')['TransactionAmount'].sum().reset_index()
monetary_data.rename(columns = {'TransactionAmount' : 'MonetaryValue'}, inplace=True)
data = data.merge(monetary_data, on='CustomerID', how='left')

data

"""## Calculating RFM Scores"""

# Defining score criteria for each RFM value
recency_scores = [5,4,3,2,1]    # Higher score for lower recency(more recent)
frequency_scores = [1,2,3,4,5]    # Higher score for higher frequency
monetary_scores = [1,2,3,4,5]   # Higher score for higher monetary value

# Calc RFM scores
data['RecencyScore'] = pd.cut(data['Recency'], bins=5, labels=recency_scores)
data['FrequencyScore'] = pd.cut(data['Frequency'], bins=5, labels=frequency_scores)
data['MonetaryScore'] = pd.cut(data['MonetaryValue'], bins=5, labels=monetary_scores)

data.info()

# Convert RFM scores to numeric type
data['RecencyScore'] = data['RecencyScore'].astype(int)
data['FrequencyScore'] = data['FrequencyScore'].astype(int)
data['MonetaryScore'] = data['MonetaryScore'].astype(int)

data.info()

"""## RFM Value Segmentation"""

# Calc RFM score by combining the individual scores
data['RFM_Score'] = data['RecencyScore'] + data['FrequencyScore'] + data['MonetaryScore']

# Create RFM Segements based on RFM Scores
segment_labels = ['Low-Value', 'Mid-Value', 'High-Value']
data['Value Segment'] = pd.qcut(data['RFM_Score'], q=3, labels=segment_labels)

data

"""## Segment Distribution using Charts"""

# RFM Segement Distribution
segment_counts = data['Value Segment'].value_counts().reset_index()
segment_counts.columns = ['Value Segment', 'Count']

pastel_colors = px.colors.qualitative.Pastel
# px.colors.qualitative.Pastel => A predefined list of pastel colors provided by plotly. Typically used for categorical data

# Creating bar charts
fig_segment_dist = px.bar(segment_counts, x='Value Segment', y='Count', color='Value Segment',
                           color_discrete_sequence=pastel_colors, title='RFM Value Segment Distribution')

# Update layout
fig_segment_dist.update_layout(xaxis_title='RFM Value Segment', yaxis_title='Count', showlegend=False)

# Display the figure
fig_segment_dist.show()

"""## Calc RFM Customer Segements
#### RFM Customer segements are broader classifcations based on the RFM Scores. These segments, such as “Champions”, “Potential Loyalists”, and “Can’t Lose” provide a more strategic perspective on customer behaviour and characteristics in terms of recency, frequency, and monetary aspects.
"""

# Creating a new col for RFM Customer Segments
data['RFM Customer Segments'] = ' '

# Assigning RFM segments based on RFM scores
data.loc[data['RFM_Score'] >= 9, 'RFM Customer Segments'] = 'Champions'
data.loc[(data['RFM_Score'] >= 6) & (data['RFM_Score'] < 9), 'RFM Customer Segments'] = 'Potential loyalists'
data.loc[(data['RFM_Score'] >= 5) & (data['RFM_Score'] < 6), 'RFM Customer Segments'] = 'At Risk Customers'
data.loc[(data['RFM_Score'] >= 4) & (data['RFM_Score'] < 5), 'RFM Customer Segments'] = "Can't Lose"
data.loc[(data['RFM_Score'] >= 3) & (data['RFM_Score'] < 4), 'RFM Customer Segments'] = 'Lost'

data[['CustomerID', 'RFM Customer Segments']]

"""## Analyzing diff RFM customer segments within each value segment"""

segment_product_counts = data.groupby(['Value Segment', 'RFM Customer Segments']).size().reset_index(name='Count')
segment_product_counts = segment_product_counts.sort_values('Count', ascending=False)
fig_treemap_segment_product = px.treemap(segment_product_counts, path=['Value Segment', 'RFM Customer Segments'], values='Count', color='Value Segment', color_discrete_sequence=px.colors.qualitative.Pastel, title='RFM Customer Segments by Value')
fig_treemap_segment_product.show()

"""## Distribution of RFM Values within the Champions segment"""

# Filter data to include only customers in champions
champions_segment = data[data['RFM Customer Segments'] == 'Champions']

fig = go.Figure()   # Creates a new figure object
fig.add_trace(go.Box(y=champions_segment['RecencyScore'], name='Recency'))
fig.add_trace(go.Box(y=champions_segment['FrequencyScore'], name='Frequency'))
fig.add_trace(go.Box(y=champions_segment['MonetaryScore'], name='Monetary'))

fig.update_layout(title='Distribution of RFM Values within the Champions segment',
                  yaxis_title='RFM Values', showlegend=True)
fig.show()

"""## Correlation of RFM scores within the champion segment"""

correlation_matrix = champions_segment[['RecencyScore', 'FrequencyScore', 'MonetaryScore']].corr()

# Visualizing the correlation matrix using heatmap
fig_heatmap = go.Figure(data=go.Heatmap(
    z=correlation_matrix.values, x=correlation_matrix.columns,
    y=correlation_matrix.columns, colorscale='RdBu',
    colorbar=dict(title='Correlation')
))

fig_heatmap.update_layout(title='Correlation matrix of RFM Values within Champion Segment')
fig_heatmap.show()

"""## Conclusion :
Correlation matrix value provides an insight of the customers, their RFM Scores, and relations between the RFM,  which can help us strategize the customer relations to increase the market revenue of the product.

## No. of customers in all segments
"""

import plotly.colors
pastel_colors = plotly.colors.qualitative.Pastel

segment_counts = data['RFM Customer Segments'].value_counts()

# Bar chart to compare segment counts
fig = go.Figure(data=[go.Bar(x=segment_counts.index, y=segment_counts.values,
                             marker=dict(color=pastel_colors))])

# Set color of champions segment as a diff color
champions_color = 'rgb(158,202,225)'
fig.update_traces(marker_color=[champions_color if segment=='Champions'
else pastel_colors[i] for i, segment in enumerate(segment_counts.index)],
                  marker_line_color='rgb(8,48,107)',
                  marker_line_width=1.5, opacity=0.5)

# update layout
fig.update_layout(title='Comparison of RFM Segments', xaxis_title='RFM Segments',
                  yaxis_title='No. of Customers', showlegend=False)

fig.show()

"""## RFM Scores of all segments"""

# Calc avg RFM scores for each segment
segment_scores = data.groupby('RFM Customer Segments')[['RecencyScore', 'FrequencyScore', 'MonetaryScore']].mean().reset_index()

# Create group bar chart to compare segment scores
fig = go.Figure()

# Add bars for Recency score
fig.add_trace(go.Bar(x=segment_scores['RFM Customer Segments'],
                     y=segment_scores['RecencyScore'],
                     name='Recency Score',
                     marker_color='rgb(158,202,225)'))

# Add bars for Frequency score
fig.add_trace(go.Bar(x=segment_scores['RFM Customer Segments'],
                     y=segment_scores['FrequencyScore'],
                     name='Frequency Score',
                     marker_color='rgb(94,158,217)'))

# Add bars for Monetary score
fig.add_trace(go.Bar(x=segment_scores['RFM Customer Segments'],
                     y=segment_scores['MonetaryScore'],
                     name='Monetary Score',
                     marker_color='rgb(32,102,148)'))

# update layout
fig.update_layout(xaxis_title='RFM Segments', yaxis_title='Score',
                  title='Comparison of RFM Segments based on RFM Scores',
                  barmode='group', showlegend=True)

fig.show()